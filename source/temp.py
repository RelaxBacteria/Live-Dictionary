    1 #! /usr/bin/env python
    2 #  -*- coding: utf-8 -*-
    3 #
    4 # GUI module generated by PAGE version 5.0.3
    5 #  in conjunction with Tcl version 8.6
    6 #    Apr 07, 2020 05:44:33 PM JST  platform: Windows NT
    7 
    8 import sys
    9 
   10 try:
   11     import Tkinter as tk
   12 except ImportError:
   13     import tkinter as tk
   14 
   15 try:
   16     import ttk
   17     py3 = False
   18 except ImportError:
   19     import tkinter.ttk as ttk
   20     py3 = True
   21 
   22 import Livedic Design_support
   23 import os.path
   24 
   25 def vp_start_gui():
   26     '''Starting point when module is the main routine.'''
   27     global val, w, root
   28     global prog_location
   29     prog_call = sys.argv[0]
   30     prog_location = os.path.split(prog_call)[0]
   31     root = tk.Tk()
   32     Livedic Design_support.set_Tk_var()
   33     top = Toplevel1 (root)
   34     Livedic Design_support.init(root, top)
   35     root.mainloop()
   36 
   37 w = None
   38 def create_Toplevel1(rt, *args, **kwargs):
   39     '''Starting point when module is imported by another module.
   40        Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
   41     global w, w_win, root
   42     global prog_location
   43     prog_call = sys.argv[0]
   44     prog_location = os.path.split(prog_call)[0]
   45     #rt = root
   46     root = rt
   47     w = tk.Toplevel (root)
   48     Livedic Design_support.set_Tk_var()
   49     top = Toplevel1 (w)
   50     Livedic Design_support.init(w, top, *args, **kwargs)
   51     return (w, top)
   52 
   53 def destroy_Toplevel1():
   54     global w
   55     w.destroy()
   56     w = None
   57 
   58 class Toplevel1:
   59     def __init__(self, top=None):
   60         '''This class configures and populates the toplevel window.
   61            top is the toplevel containing window.'''
   62         _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
   63         _fgcolor = '#000000'  # X11 color: 'black'
   64         _compcolor = '#d9d9d9' # X11 color: 'gray85'
   65         _ana1color = '#d9d9d9' # X11 color: 'gray85'
   66         _ana2color = '#ececec' # Closest X11 color: 'gray92'
   67         self.style = ttk.Style()
   68         if sys.platform == "win32":
   69             self.style.theme_use('winnative')
   70         self.style.configure('.',background=_bgcolor)
   71         self.style.configure('.',foreground=_fgcolor)
   72         self.style.map('.',background=
   73             [('selected', _compcolor), ('active',_ana2color)])
   74 
   75         top.geometry("420x828+611+11")
   76         top.minsize(120, 1)
   77         top.maxsize(1604, 881)
   78         top.resizable(0, 0)
   79         top.title("Live Dictionary")
   80         top.configure(background="#d9d9d9")
   81 
   82         self.Operations_LabelFrame = tk.LabelFrame(top)
   83         self.Operations_LabelFrame.place(relx=0.095, rely=0.013, relheight=0.175
   84                 , relwidth=0.224)
   85         self.Operations_LabelFrame.configure(relief='groove')
   86         self.Operations_LabelFrame.configure(foreground="black")
   87         self.Operations_LabelFrame.configure(text='''Operations''')
   88         self.Operations_LabelFrame.configure(background="#d9d9d9")
   89         self.Operations_LabelFrame.configure(cursor="fleur")
   90 
   91         self.CaptureButton = tk.Button(self.Operations_LabelFrame)
   92         self.CaptureButton.place(relx=0.106, rely=0.214, height=24, width=77
   93                 , bordermode='ignore')
   94         self.CaptureButton.configure(activebackground="#ececec")
   95         self.CaptureButton.configure(activeforeground="#000000")
   96         self.CaptureButton.configure(background="#d9d9d9")
   97         self.CaptureButton.configure(disabledforeground="#a3a3a3")
   98         self.CaptureButton.configure(foreground="#000000")
   99         self.CaptureButton.configure(highlightbackground="#d9d9d9")
  100         self.CaptureButton.configure(highlightcolor="black")
  101         self.CaptureButton.configure(pady="0")
  102         self.CaptureButton.configure(text='''Capture''')
  103 
  104         self.DetectButton = tk.Button(self.Operations_LabelFrame)
  105         self.DetectButton.place(relx=0.106, rely=0.428, height=24, width=77
  106                 , bordermode='ignore')
  107         self.DetectButton.configure(activebackground="#ececec")
  108         self.DetectButton.configure(activeforeground="#000000")
  109         self.DetectButton.configure(background="#d9d9d9")
  110         self.DetectButton.configure(disabledforeground="#a3a3a3")
  111         self.DetectButton.configure(foreground="#000000")
  112         self.DetectButton.configure(highlightbackground="#d9d9d9")
  113         self.DetectButton.configure(highlightcolor="black")
  114         self.DetectButton.configure(pady="0")
  115         self.DetectButton.configure(text='''Detect''')
  116 
  117         self.Language = tk.Button(self.Operations_LabelFrame)
  118         self.Language.place(relx=0.106, rely=0.717, height=24, width=77
  119                 , bordermode='ignore')
  120         self.Language.configure(activebackground="#ececec")
  121         self.Language.configure(activeforeground="#000000")
  122         self.Language.configure(background="#d9d9d9")
  123         self.Language.configure(disabledforeground="#a3a3a3")
  124         self.Language.configure(foreground="#000000")
  125         self.Language.configure(highlightbackground="#d9d9d9")
  126         self.Language.configure(highlightcolor="black")
  127         self.Language.configure(pady="0")
  128         self.Language.configure(text='''Language''')
  129 
  130         self.Preview = tk.Label(top)
  131         self.Preview.place(relx=0.095, rely=0.225, height=240, width=340)
  132         self.Preview.configure(background="#d9d9d9")
  133         self.Preview.configure(disabledforeground="#a3a3a3")
  134         self.Preview.configure(foreground="#000000")
  135         photo_location = os.path.join(prog_location,"../../K-001.png")
  136         global _img0
  137         _img0 = tk.PhotoImage(file=photo_location)
  138         self.Preview.configure(image=_img0)
  139         self.Preview.configure(text='''Label''')
  140 
  141         self.ResultTextBox = ScrolledText(top)
  142         self.ResultTextBox.place(relx=0.095, rely=0.55, relheight=0.424
  143                 , relwidth=0.798)
  144         self.ResultTextBox.configure(background="white")
  145         self.ResultTextBox.configure(font="TkTextFont")
  146         self.ResultTextBox.configure(foreground="black")
  147         self.ResultTextBox.configure(highlightbackground="#d9d9d9")
  148         self.ResultTextBox.configure(highlightcolor="black")
  149         self.ResultTextBox.configure(insertbackground="black")
  150         self.ResultTextBox.configure(insertborderwidth="3")
  151         self.ResultTextBox.configure(selectbackground="#c4c4c4")
  152         self.ResultTextBox.configure(selectforeground="black")
  153         self.ResultTextBox.configure(wrap="none")
  154 
  155         self.ImageLabelFrame = tk.LabelFrame(top)
  156         self.ImageLabelFrame.place(relx=0.357, rely=0.013, relheight=0.17
  157                 , relwidth=0.548)
  158         self.ImageLabelFrame.configure(relief='groove')
  159         self.ImageLabelFrame.configure(foreground="black")
  160         self.ImageLabelFrame.configure(text='''Labelframe''')
  161         self.ImageLabelFrame.configure(background="#d9d9d9")
  162 
  163         self.EnlargeCheck = tk.Checkbutton(self.ImageLabelFrame)
  164         self.EnlargeCheck.place(relx=0.043, rely=0.149, relheight=0.184
  165                 , relwidth=0.265, bordermode='ignore')
  166         self.EnlargeCheck.configure(activebackground="#ececec")
  167         self.EnlargeCheck.configure(activeforeground="#000000")
  168         self.EnlargeCheck.configure(background="#d9d9d9")
  169         self.EnlargeCheck.configure(disabledforeground="#a3a3a3")
  170         self.EnlargeCheck.configure(foreground="#000000")
  171         self.EnlargeCheck.configure(highlightbackground="#d9d9d9")
  172         self.EnlargeCheck.configure(highlightcolor="black")
  173         self.EnlargeCheck.configure(justify='left')
  174         self.EnlargeCheck.configure(text='''Check''')
  175         self.EnlargeCheck.configure(variable=Livedic Design_support.che59)
  176 
  177 # The following code is added to facilitate the Scrolled widgets you specified.
  178 class AutoScroll(object):
  179     '''Configure the scrollbars for a widget.'''
  180     def __init__(self, master):
  181         #  Rozen. Added the try-except clauses so that this class
  182         #  could be used for scrolled entry widget for which vertical
  183         #  scrolling is not supported. 5/7/14.
  184         try:
  185             vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
  186         except:
  187             pass
  188         hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
  189         try:
  190             self.configure(yscrollcommand=self._autoscroll(vsb))
  191         except:
  192             pass
  193         self.configure(xscrollcommand=self._autoscroll(hsb))
  194         self.grid(column=0, row=0, sticky='nsew')
  195         try:
  196             vsb.grid(column=1, row=0, sticky='ns')
  197         except:
  198             pass
  199         hsb.grid(column=0, row=1, sticky='ew')
  200         master.grid_columnconfigure(0, weight=1)
  201         master.grid_rowconfigure(0, weight=1)
  202         # Copy geometry methods of master  (taken from ScrolledText.py)
  203         if py3:
  204             methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
  205                   | tk.Place.__dict__.keys()
  206         else:
  207             methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
  208                   + tk.Place.__dict__.keys()
  209         for meth in methods:
  210             if meth[0] != '_' and meth not in ('config', 'configure'):
  211                 setattr(self, meth, getattr(master, meth))
  212 
  213     @staticmethod
  214     def _autoscroll(sbar):
  215         '''Hide and show scrollbar as needed.'''
  216         def wrapped(first, last):
  217             first, last = float(first), float(last)
  218             if first <= 0 and last >= 1:
  219                 sbar.grid_remove()
  220             else:
  221                 sbar.grid()
  222             sbar.set(first, last)
  223         return wrapped
  224 
  225     def __str__(self):
  226         return str(self.master)
  227 
  228 def _create_container(func):
  229     '''Creates a ttk Frame with a given master, and use this new frame to
  230     place the scrollbars and the widget.'''
  231     def wrapped(cls, master, **kw):
  232         container = ttk.Frame(master)
  233         container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
  234         container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
  235         return func(cls, container, **kw)
  236     return wrapped
  237 
  238 class ScrolledText(AutoScroll, tk.Text):
  239     '''A standard Tkinter Text widget with scrollbars that will
  240     automatically show/hide as needed.'''
  241     @_create_container
  242     def __init__(self, master, **kw):
  243         tk.Text.__init__(self, master, **kw)
  244         AutoScroll.__init__(self, master)
  245 
  246 import platform
  247 def _bound_to_mousewheel(event, widget):
  248     child = widget.winfo_children()[0]
  249     if platform.system() == 'Windows' or platform.system() == 'Darwin':
  250         child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
  251         child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
  252     else:
  253         child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
  254         child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
  255         child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
  256         child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))
  257 
  258 def _unbound_to_mousewheel(event, widget):
  259     if platform.system() == 'Windows' or platform.system() == 'Darwin':
  260         widget.unbind_all('<MouseWheel>')
  261         widget.unbind_all('<Shift-MouseWheel>')
  262     else:
  263         widget.unbind_all('<Button-4>')
  264         widget.unbind_all('<Button-5>')
  265         widget.unbind_all('<Shift-Button-4>')
  266         widget.unbind_all('<Shift-Button-5>')
  267 
  268 def _on_mousewheel(event, widget):
  269     if platform.system() == 'Windows':
  270         widget.yview_scroll(-1*int(event.delta/120),'units')
  271     elif platform.system() == 'Darwin':
  272         widget.yview_scroll(-1*int(event.delta),'units')
  273     else:
  274         if event.num == 4:
  275             widget.yview_scroll(-1, 'units')
  276         elif event.num == 5:
  277             widget.yview_scroll(1, 'units')
  278 
  279 def _on_shiftmouse(event, widget):
  280     if platform.system() == 'Windows':
  281         widget.xview_scroll(-1*int(event.delta/120), 'units')
  282     elif platform.system() == 'Darwin':
  283         widget.xview_scroll(-1*int(event.delta), 'units')
  284     else:
  285         if event.num == 4:
  286             widget.xview_scroll(-1, 'units')
  287         elif event.num == 5:
  288             widget.xview_scroll(1, 'units')
  289 
  290 if __name__ == '__main__':
  291     vp_start_gui()
  292 
  293 

